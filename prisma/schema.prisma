// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  emailVerified   DateTime?
  username        String    @unique
  displayName     String
  image           String?
  hashedPassword  String?
  virtualBalance  Decimal   @default(100.00)
  totalWinnings   Decimal   @default(0.00)
  totalLosses     Decimal   @default(0.00)
  isAdmin         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  createdEvents Event[]   @relation("EventCreator")
  bets          Bet[]
  comments      Comment[]
  commentLikes  CommentLike[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// SQLite doesn't support enums, so we use strings with constraints

model Event {
  id             String      @id @default(cuid())
  title          String
  description    String
  category       String
  createdById    String
  status         String      @default("ACTIVE") // ACTIVE, CLOSED, RESOLVED
  resolutionDate DateTime?
  endDate        DateTime?   // Optional for ongoing events
  isOngoing      Boolean     @default(false) // For events without end dates
  yesPrice       Decimal     @default(50.00) // Price as percentage (0-100)
  totalVolume    Decimal     @default(0.00)
  resolved       Boolean     @default(false)
  outcome        Boolean? // true for YES, false for NO
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  createdBy    User         @relation("EventCreator", fields: [createdById], references: [id])
  bets         Bet[]
  priceHistory PricePoint[]
  comments     Comment[]

  @@map("events")
}

model PricePoint {
  id       String   @id @default(cuid())
  eventId  String
  yesPrice Decimal
  noPrice  Decimal
  volume   Decimal
  timestamp DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

model Bet {
  id        String    @id @default(cuid())
  userId    String
  eventId   String
  side      String // "YES" or "NO"
  amount    Decimal
  price     Decimal // Price when bet was made (0-100)
  shares    Decimal // Calculated from amount/price * 100
  status    String    @default("ACTIVE") // ACTIVE, WON, LOST
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("bets")
}

model Comment {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  content   String
  parentId  String?  // For replies
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event    Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Comment?    @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[]   @relation("CommentReplies")
  likes    CommentLike[]

  @@map("comments")
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@map("comment_likes")
}